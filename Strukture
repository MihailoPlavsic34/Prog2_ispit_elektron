#include <stdio.h>
#include <string.h>


char* citaj(char* p) {
	char c;
	int i = 0;
	char* pom;

	while ((c = getchar()) != '\n') { // !=, negacija jedanko, 1 je kad nije jednako
		if (i % 10 == 0) { // 10 jer realociranje traje dugo pa zato pravimo balans izmedju brzine i kor memorije
			pom = realloc(p, (i + 10) * sizeof(char));
			if (pom == NULL) { // znaci da pom ne pokazuje ni na sta, nema dovoljno memorije
				printf("Neuspesna realokacija"); // ne mozemo da nastavimo s programom
				exit(1);
			}
			else
				p = pom;
		}
		p[i++] = c;
	}
	// ako imamo rec koje je ucitana koja je manja od naseg "koraka" (po 10 memorija charova)
	//onda moramo da se resimo "viska" 
	pom = realloc(p, (i + 1) * sizeof(char));
	if (pom == NULL) {
		printf("Neuspesna realokacija");
		exit(1);
	}
	else
		p = pom;
	p[i] = '\0'; // nas niz charova koji nam glumi string mora da se zavrsava s '\0'

	return p; // bez ovoga dzabe poso ovde se vraca vrednost funkcije, def u zaglavlju
}

typedef struct element {
	char *ime, *prezime;
	double prosek;
	struct element *sledeci;
} Element;

Element* ucitaj(Element *p, int n) {
	Element *novi, *stari;
	int i;

	for (i = 0; i < n; i++) {
		novi = calloc(sizeof(Element)); // pravimo novi element nase liste, koji je structura Element
		printf("%d. ime?", i+1);
		novi->ime = citaj(novi->ime);
		printf("%d. prezime?", i + 1);//popunjavamo pomocu one nase funkcije iz prethodnog programa
		novi->prezime = citaj(novi->prezime);
		printf("%d. prosek?", i + 1);
		scanf("%lf", &novi->prosek);
		getchar();
		novi->sledeci = NULL; //kako svaki nas "novi" element ide na kraj liste mora bit vezan u NULL

		if (p == NULL) //p je ono sto mi prosledjujemo iz glavnog programa, u pocetku ce to biti NULL
			p = novi; //posle prve iteracije p nece vise biti NULL jer smo rekli da je sad p = novi
		else
			stari->sledeci = novi;//sad moramo da se postaramo da je uvezan u listu

		stari = novi;//sad je element koji smo upravo napravili novi "stari"
	}
	return p;//lepo bi bilo da vratimo nesto iz ove funkcije
}

void stampaj(Element *p) {

	while (p) {
		puts(p->ime); puts(p->prezime);//ova puts je neka funkcija koja stavlja charove, stavlja i \n kad napise sto je lepo
		printf("%f\n", p->prosek);
		p = p ->sledeci;//idemo na sledeci i picimo do NULL-a
	}
}

Element* brisi(Element *p) {
	Element *stari;
	while (p) {
		stari = p; //njega cemo da brisemo a moramo da sacuvamo informaciju koji je sledeci
		p = p->sledeci; //zato skocimo a brisemo ono na sta pokazuje stari
		free(stari);	//sto je upravo element p
	}

}

Element * obradi(Element *p) { //ovo je sad malo jebenije
	double s = 0; 
	int i = 0;
	Element *prvi = p, *pret, *tek, *stari;

	tek = prvi;
	while (tek) {
		s += tek->prosek; i++;
		tek = tek->sledeci; //samo nacin da dobijemo prosek svih proseka
	}
	s /= i;

	tek = prvi; pret = NULL; //postavljamo se na pocetak liste tekuci je sad prvi, znaci pret je NULL
	if (tek->prosek < s) { //u elementu na koji pokazuje tek pristupamo polju prosek i gledamo dal je manje od s
		if (pret == NULL) {//ako jeste onda bi moramo da vidimo dal je to prvi element
			stari = tek; //kako smo pret stavili na NULL ulazimo i radimo zamenu
			tek = tek->sledeci;
			prvi = tek;
			free(stari);
		}
		else {
			stari = tek;//ista prica ko u prvom samo sad povezujemo prethodni i njegov novi sledeci nas tekuci
			tek = tek->sledeci;
			pret->sledeci = tek;
			free(stari);
		}
	
	}
	else {
		pret = tek;//ovo je kad preskacemo elemente koje je treba da izbacujemo
		tek = tek->sledeci;
	
	}
	return prvi;//vracamo glavu i sve je ok
}

int main() {
	Element *glava = NULL;//na pocetku je glava ili prvi element liste povezana ni sa cim

	while (1) {

		printf("\n1. Ucitavanje liste"
			"\n2. Stampanje liste"
			"\n3. Brisanje liste"
			"\n4. Izbacivanje losih studenata"
			"\n0. Izlaz iz programa"
			"\nVas izbor?\n");//nema sta nejasno ja msm
		int n, izbor;
		scanf("%d", &izbor);
		getchar();

		switch (izbor) {
		case 0:
			printf("Uspesno ste izasli iz programa!");
			exit(1);

		case 1:
			printf("n?\n");
			scanf("%d", &n);
			getchar();//zbog onog ucitavanja preko funkcije ucitaj da getchar ne pokupi enter i sjebe sve
			glava = ucitaj(glava, n);
			break;
		case 2:
			stampaj(glava);
			break;
		case 3:
			glava = brisi(glava);
			break;
		case 4: //losi studenti oni koji imaju prosek koji je manji od proseka svih proseka 		
			glava = obradi(glava);
			break;
		default:
			printf("\nNekorektan unos probajte ponovo!");
		}

	}
}
